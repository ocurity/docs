"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[581],{5471:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var t=i(4848),o=i(8453);const s={title:"Creating a Pipeline",description:"As Easy As 1, 2, 3... 4?",sidebar_position:3},l=void 0,a={id:"writing-pipelines",title:"Creating a Pipeline",description:"As Easy As 1, 2, 3... 4?",source:"@site/docs/writing-pipelines.md",sourceDirName:".",slug:"/writing-pipelines",permalink:"/docs/writing-pipelines",draft:!1,unlisted:!1,editUrl:"https://github.com/ocurity/docs/tree/main/packages/create-docusaurus/templates/shared/docs/writing-pipelines.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Creating a Pipeline",description:"As Easy As 1, 2, 3... 4?",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Development",permalink:"/docs/development"},next:{title:"Creating a Component",permalink:"/docs/category/creating-a-component"}},r={},c=[{value:"Example",id:"example",level:2},{value:"Running a pipeline",id:"running-a-pipeline",level:2}];function p(e){const n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Composing pipelines is easy, it just takes four steps:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Write a ",(0,t.jsx)(n.code,{children:"kustomization.yaml"})," file pointing to the components you want to use."]}),"\n",(0,t.jsxs)(n.li,{children:["Run ",(0,t.jsx)(n.code,{children:"draconctl pipelines build <path/to/kustomization.yaml>"})," and redirect the\noutput to a yaml file. This automatically collects all the component yamls to\na single templated file."]}),"\n",(0,t.jsxs)(n.li,{children:["Write a helm ",(0,t.jsx)(n.code,{children:"Chart.yaml"})," for your pipeline"]}),"\n",(0,t.jsx)(n.li,{children:"Write a pipelineRun.yaml providing values for your pipeline"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,t.jsxs)(n.p,{children:["Let's assume we want to scan a repository, that contains code written in Go.\nSince we are scannign Go it makes sense to also enrich the results by detecting\nduplicates and as a bonus let's also apply a Rego policy.\nWe can compose this pipeline by writing the following ",(0,t.jsx)(n.code,{children:"kustomization.yaml"})]}),"\n",(0,t.jsx)(n.p,{children:"In the following file:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["we tell ",(0,t.jsx)(n.code,{children:"draconctl"})," that we want the pipeline pods to have the suffix\n",(0,t.jsx)(n.code,{children:"*-golang-project"})]}),"\n",(0,t.jsxs)(n.li,{children:["it should base everything to the official ",(0,t.jsx)(n.code,{children:"task.yaml"})," and ",(0,t.jsx)(n.code,{children:"pipeline.yaml"})]}),"\n",(0,t.jsxs)(n.li,{children:["it should start by running a ",(0,t.jsx)(n.code,{children:"git clone"})," to bring the code in for scanning"]}),"\n",(0,t.jsxs)(n.li,{children:["it should scan the code with the ",(0,t.jsx)(n.code,{children:"nancy"})," and ",(0,t.jsx)(n.code,{children:"gosec"})," components."]}),"\n",(0,t.jsx)(n.li,{children:"it should aggregate the scanning results"}),"\n",(0,t.jsx)(n.li,{children:"enrich the results by applying policy and deduplicating"}),"\n",(0,t.jsx)(n.li,{children:"it should aggregate the enriched results"}),"\n",(0,t.jsxs)(n.li,{children:["finally ",(0,t.jsx)(n.code,{children:"draconctl"})," should push results to ",(0,t.jsx)(n.code,{children:"mongodb"})," and ",(0,t.jsx)(n.code,{children:"elasticsearch"})]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"---\n# file: go-pipeline/kustomization.yaml\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nnameSuffix: -go-pipeline\nresources:\n  - ../../../components/base/pipeline.yaml\n  - ../../../components/base/task.yaml\ncomponents:\n  - ../../../components/sources/git\n  - ../../../components/producers/aggregator\n  - ../../../components/producers/golang-gosec\n  - ../../../components/producers/golang-nancy\n  - ../../../components/enrichers/aggregator\n  - ../../../components/enrichers/policy\n  - ../../../components/enrichers/deduplication\n  - ../../../components/consumers/mongodb\n  - ../../../components/consumers/elasticsearch\n\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Then executing ",(0,t.jsx)(n.code,{children:"draconctl pipelines build ./go-pipeline/kustomization.yaml > ./go-pipeline/templates/all.yaml"}),"\ngenerates a Helm template.\nTo make the template into a chart we create the following ",(0,t.jsx)(n.code,{children:"Chart.yaml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# file: ./go-pipeline/Chart.yaml\napiVersion: v2\nname: "dracon-golang-project"\ndescription: "A Helm chart for deploying a Dracon pipeline for a Golang project."\ntype: "application"\nversion: 0.0.1\nappVersion: "0.0.1"\n'})}),"\n",(0,t.jsx)(n.p,{children:"We can manage this chart as any other Helm chart and install it with:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'helm upgrade go-pipeline ./go-pipeline --install \\\n     --set "container_registry=kind-registry:5000/ocurity/dracon" \\\n     --set "dracon_os_component_version=$(make print-DRACON_VERSION)"\n'})}),"\n",(0,t.jsx)(n.p,{children:"and that's it!"}),"\n",(0,t.jsx)(n.h2,{id:"running-a-pipeline",children:"Running a pipeline"}),"\n",(0,t.jsxs)(n.p,{children:["To run a pipeline you need a ",(0,t.jsx)(n.code,{children:"pipelinerun.yaml"})," which binds values to the\ncomponent variables and instructs k8s to run the relevant pipeline.\nFor the pipeline above we can use the following ",(0,t.jsx)(n.code,{children:"pipelinerun.yaml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# file: ./go-pipeline/pipelinerun/pipelinerun.yaml\n---\napiVersion: tekton.dev/v1beta1\nkind: PipelineRun\nmetadata:\n  generateName: go-pipeline-\nspec:\n  pipelineRef:\n    name: go-pipeline\n  params:\n  - name: git-clone-url\n    value: <Your Git URL>\n  - name: git-clone-subdirectory\n    value: source-code\n  workspaces:\n  - name: output\n    volumeClaimTemplate:\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 1Gi\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In this pipelinerun we provide the minimal values required to run the components\n, namely a ",(0,t.jsx)(n.code,{children:"git-clone-url"})," pointing to the repository we want to clone.\nYou can provide more values and customize the components more by providing the\nrelevant values as shown in each component documentation."]}),"\n",(0,t.jsxs)(n.p,{children:["This pipelinerun can be triggered with:\n",(0,t.jsx)(n.code,{children:"cat ./go-pipeline/pipelinerun/pipelinerun.yaml | kubectl create -f -"})]}),"\n",(0,t.jsxs)(n.p,{children:["You can monitor this pipeline's execution either in the Tekton dashboard or\nusing ",(0,t.jsx)(n.code,{children:"kubectl get po -w"})]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var t=i(6540);const o={},s=t.createContext(o);function l(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);